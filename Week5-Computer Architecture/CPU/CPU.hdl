/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /*************************writeM signal***********************************/
    And(a = instruction[15], b = instruction[3], out = writeM);

    /*************************Loading A register*******************************/
    Mux16(a = instruction, b = ALUOut, sel = instruction[15], out = outMux1);
    Not(in = instruction[5], out = notIns5);
    Nand(a = notIns5, b = instruction[15], out = loadAReg);
    ARegister(in = outMux1, load = loadAReg, out = ARegisterOut, out[0..14] = addressM);

    /*************************Loading D register*******************************/
    And(a = instruction[4], b = instruction[15], out = loadDReg);
    DRegister(in = ALUOut, load = loadDReg, out = DRegisterOut);

    /*************************ALU**********************************************/
    Mux16(a = ARegisterOut, b = inM, sel = instruction[12], out = ALUy);
    ALU(x = DRegisterOut, y = ALUy, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outM, out = ALUOut, out[15] = check, zr = zrFlag, ng = ngFlag);

    /**************************Program Counter*********************************/
    Not(in = ngFlag, out = notNegative);
    Not(in = zrFlag, out = notZero);

    //Less than or equal to
    Or(a = zrFlag, b = ngFlag, out = le);

    //Greater than or equal to
    Or(a = zrFlag, b = notNegative, out = ge);

    //Check if positive
    And(a = notZero, b = notNegative, out = positive);

    //8x1 Mux
    Mux(a = false, b = positive, sel = instruction[0], out = mux0);
    Mux(a = zrFlag, b = ge, sel = instruction[0], out = mux1);
    Mux(a = ngFlag, b = notZero, sel = instruction[0], out = mux2);
    Mux(a = le, b = true, sel = instruction[0], out = mux3);
    Mux(a = mux0, b = mux1, sel = instruction[1], out = mux4);
    Mux(a = mux2, b = mux3, sel = instruction[1], out = mux5);
    Mux(a = mux4, b = mux5, sel = instruction[2], out = mux6);

    //Only load if it is both C instruction and jump instruction
    And(a = mux6, b = instruction[15], out = PCLoad);

    //If PCLoad, jump. Else, PC++
    Not(in = PCLoad, out = IncPc);

    PC(in = ARegisterOut, load = PCLoad, inc = IncPc, reset = reset, out[0..14] = pc);
}